#Word_Reverse
word = input()
reverse_word = ""
for letter in range(len(word) - 1, -1, -1):
    reverse_word += word[letter]
print(reverse_word)

#Patterns
largest_count_of_pattern = int(input())

for row in range(largest_count_of_pattern):
    for pattern_count in range(0, row + 1):
        print('*', end='')
    print("")
for row in range(largest_count_of_pattern - 1, 0, -1):
    for pattern_count in range(0, row):
        print('*', end='')
    print("")

#Double_Char
string = input()
result = ''
for letters in string:
    result += letters*2
print(result)

#Mutate_Strings
first_string = input()
second_string = input()
for current_letter in range(len(first_string)):
    if first_string[current_letter] != second_string[current_letter]:
        replacement = second_string[current_letter]
        new_word = first_string[0: current_letter] + replacement + first_string[current_letter + 1:]
        first_string = new_word
        print(new_word)

#Easter_Bread
budget = float(input())
price_for_1kg_flour = float(input())
price_for_1pack_eggs = 0.75 * price_for_1kg_flour
price_for_250ml_milk = price_for_1kg_flour * 1.25 / 4
loaves_made = 0
colourful_eggs = 0
price_to_make_one_bread = price_for_1kg_flour + price_for_1pack_eggs + price_for_250ml_milk
while budget - price_to_make_one_bread > 0:
    budget -= price_to_make_one_bread
    loaves_made += 1
    colourful_eggs += 3
    if loaves_made % 3 == 0:
        colourful_eggs -= loaves_made - 2
print(f"You made {loaves_made} loaves of Easter bread! Now you have {colourful_eggs} eggs and {budget:.2f}BGN left.")

#Special_Numbers
number = int(input())
for num in range(1, number + 1):
    sum_of_digits = 0
    digits = num
    while digits > 0:
        sum_of_digits += digits % 10
        digits = int(digits/10)
    if sum_of_digits == 5 or sum_of_digits == 7 or sum_of_digits == 11:
        print(f"{num} -> True")
    else:
        print(f"{num} -> False")

#Elevator
number_of_people = int(input())
capacity = int(input())
courses = 0
if number_of_people >= capacity:
    courses = int(number_of_people / capacity)
    left_people = number_of_people - capacity * courses
    left = number_of_people % capacity
    if left <= capacity and left_people != 0:
        courses += 1
else:
    courses = 1
print(courses)

#Triples_of_Latin_Letters
how_many_letters = int(input())
for i in range(0, how_many_letters):
    for k in range(0, how_many_letters):
        for j in range(0, how_many_letters):
            print(f"{chr(97 + i)}{chr(97 + k)}{chr(97 + j)}")

#Water_overflow
number_of_lines = int(input())
capacity = 0
for i in range(number_of_lines):
    liters = int(input())
    if liters + capacity <= 255:
        capacity += liters
        continue
    print("Insufficient capacity!")
print(capacity)

#convert num to str
import inflect
p = inflect.engine()
num = int(input())
print(p.number_to_words(num))

#reverse 4 edigit numbers
num = int(input())
reversed_num = 0
if 1000 <= num <= 9999:
    while num != 0:
        digit = num % 10
        reversed_num = reversed_num * 10 + digit
        num //= 10
else:
    print("no 4 digits")
print(reversed_num)

#descending sorting
num1 = float(input())
num2 = float(input())
num3 = float(input())
list = (num1, num2, num3)
sorted_list = sorted(list, reverse = True)
print(sorted_list)

#nums that are divided to 5, 7
range_1 = range(1500, 2700, 1)
list_1 = list()
for num in range_1:
    if num % 5 == 0 or num % 7 == 0:
        list_1.append(num)
print(list_1)

# *scheme
counter = 1
while counter != 5:
    print(counter * " *")
    counter += 1
second_counter = 4
while second_counter != 0:
    print(counter * " *")
    counter -= 1

#fibunachi_sequence
n1, n2 = 0, 1
while n1 < 50:
    print(n1, end=" ")
    new_num = n1 + n2
    n1 = n2
    n2 = new_num

#1, 22, 333..
counter = 1
char = ""
while counter < 10:
    print(str(counter) * counter)
    counter += 1

#c^3 = a^2 + b^2
range1 = range(1, 50, 1)
for a in range1:
    for b in range1:
        for c in range1:
            if a**2 + b**2 == c**3:
                print(f"Found result: {a}^2 + {b}^2 = {c}^2")

#numeric pyramide
for num1 in range(9):
    for num2 in range(num1+1):
        print(num2+1, end=" ")
    print("\n")

#is_it_prime
num = int(input('Enter a number: '))
flag = False
if num == 1:
    print("the number is not prime!")
elif num > 1:
    for i in range(2, num):
        if (num % i) == 0:
            flag = True
            break
    if flag:
        print("the number is not prime!")
    else:
        print("the number is prime")

#not_repeated_char
string = input()
not_repeated = ''
for letter in string:
    if letter not in not_repeated:
        not_repeated += letter
print(not_repeated)

#factorial_formula(N!*K!)/(N-K)!
n, k = input().split(", ")
n_num = int(n[4])
k_num = int(k[4])
n_factorial = 1
k_factorial = 1
n_minus_k_factorial = 1
if 1 < k_num < n_num:
    sum_n_minus_k = n_num - k_num
    for i1 in range(1, n_num + 1):
        n_factorial *= i1
    for i2 in range(1, k_num + 1):
        k_factorial *= i2
    for i3 in range(1, sum_n_minus_k + 1):
        n_minus_k_factorial *= i3
    result = (n_factorial * k_factorial) / n_minus_k_factorial
    print(result)
elif k_num > n_num:
    print("K should be less than N")
else:
    print("Invalid Input")
